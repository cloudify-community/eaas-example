tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml
  - plugin:cloudify-aws-plugin?version= >=2.5.6

dsl_definitions:
  aws_client: &aws_client
    aws_access_key_id: { get_input: [ cloud_credentials, aws_access_key_id ] }
    aws_secret_access_key: { get_input: [ cloud_credentials, aws_secret_access_key ] }
    region_name: { get_input: [ cloud_credentials, region_name ] }

inputs:
  resource_prefix:
    type: string
  cloud_credentials:
    type: dict
  resource_config:
    type: resource_config

data_types:
  resource_config:
    properties:
      eks_cluster_name:
        type: string
        default: { concat: [ { get_input: resource_prefix }, '_eks_cluster' ] }
    

node_templates:
  vpc_deployment:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          id: { concat: [ { get_input: resource_prefix }, "-vpc" ] }
          blueprint_archive: https://github.com/cloudify-community/eaas-example/releases/download/2.0rc1/vpc.zip
          main_file_name: blueprint.yaml
        deployment:
          id: { concat: [ { get_input: resource_prefix }, '-vpc' ] }
          inputs:
            cloud_credentials: { get_input: cloud_credentials }
            resource_config:
              name: { concat: [ { get_input: resource_prefix }, '-vpc' ] }
              aws_region_name: { get_input: [ cloud_credentials, region_name ] }
              availability_zone_1: { concat: [{ get_input: [ cloud_credentials, region_name ] }, 'a' ] }
              availability_zone_2: { concat: [{ get_input: [ cloud_credentials, region_name ] }, 'c' ] }
              subnet_1_tags:
                - Key: Name
                  Value: { concat: [ { get_property: [ SELF, resource_config, deployment, inputs, resource_config, name ] }, '-subnet-1' ] }
                - Key:
                    concat:
                      - kubernetes.io/cluster/
                      - { concat: [ { get_input: resource_prefix }, '_eks_cluster' ] }
                  Value: shared
                - Key: kubernetes.io/role/internal-elb
                  Value: '1'
              subnet_2_tags:
                - Key: Name
                  Value: { concat: [ { get_property: [ SELF, resource_config, deployment, inputs, resource_config, name ] }, '-subnet-2' ] }
                - Key:
                    concat:
                      - kubernetes.io/cluster/
                      - { concat: [ { get_input: resource_prefix }, '_eks_cluster' ] }
                  Value: shared
                - Key: kubernetes.io/role/internal-elb
                  Value: '1'

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *aws_client
      use_external_resource: true
      resource_config:
        CidrBlock: ''
      resource_id: { get_attribute: [ vpc_deployment, capabilities, vpc_id ] }
    relationships:
      - target: vpc_deployment
        type: cloudify.relationships.depends_on

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *aws_client
      use_external_resource: true
      resource_id: { get_attribute: [ vpc_deployment, capabilities, internet_gateway_id ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        start: {}
    relationships:
      - target: vpc_deployment
        type: cloudify.relationships.depends_on

  private_subnet_01:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *aws_client
      use_external_resource: true
      resource_id: { get_attribute: [ vpc_deployment, capabilities, subnet_ids, 0 ] }
      resource_config:
        CidrBlock: ''
    relationships:
      - target: vpc_deployment
        type: cloudify.relationships.depends_on

  private_route_table_01:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: private_subnet_01

  private_subnet_02:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *aws_client
      use_external_resource: true
      resource_id: { get_attribute: [ vpc_deployment, capabilities, subnet_ids, 1 ] }
      resource_config:
        CidrBlock: ''
    relationships:
      - target: vpc_deployment
        type: cloudify.relationships.depends_on

  private_route_table_02:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: private_subnet_02

  public_subnet_01:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: '10.0.2.0/24'
        AvailabilityZone: { get_attribute: [ vpc_deployment, capabilities, availability_zones, 0 ] }
      client_config: *aws_client
      Tags:
        - Key: Name
          Value: { concat: [ { get_input: resource_prefix }, '_eks_public_subnet_1' ] }
        - Key:
            concat:
              - kubernetes.io/cluster/
              - { concat: [ { get_input: resource_prefix }, '_eks_cluster' ] }
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: '1'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        poststart:
          implementation: aws.cloudify_aws.ec2.resources.subnet.modify_subnet_attribute
          inputs:
            resource_config:
              MapPublicIpOnLaunch:
                Value: true

  public_route_table_01:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: public_subnet_01

  public_route_internet_gateway_01:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_route_table_01
      - type: cloudify.relationships.connected_to
        target: internet_gateway

  public_subnet_02:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: '10.0.3.0/24'
        AvailabilityZone: { get_attribute: [ vpc_deployment, capabilities, availability_zones, 1 ] }
      client_config: *aws_client
      Tags:
        - Key: Name
          Value: { concat: [ { get_input: resource_prefix }, '_eks_public_subnet_2' ] }
        - Key:
            concat:
              - kubernetes.io/cluster/
              - { concat: [ { get_input: resource_prefix }, '_eks_cluster' ] }
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: '1'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        poststart:
          implementation: aws.cloudify_aws.ec2.resources.subnet.modify_subnet_attribute
          inputs:
            resource_config:
              MapPublicIpOnLaunch:
                Value: true

  public_route_table_02:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: public_subnet_02

  public_route_internet_gateway_02:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_route_table_02
      - type: cloudify.relationships.connected_to
        target: internet_gateway

  elastic_ip_01:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      Tags:
        - Key: Name
          Value: { concat: [ { get_input: resource_prefix }, '-ip-1' ] }
      client_config: *aws_client

  private_nat_gateway_01:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *aws_client
      resource_config:
        ConnectivityType: private
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet_01
      - type: cloudify.relationships.depends_on
        target: elastic_ip_01

  elastic_ip_02:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      Tags:
        - Key: Name
          Value: { concat: [ { get_input: resource_prefix }, '-ip-2' ] }
      client_config: *aws_client

  private_nat_gateway_02:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *aws_client
      resource_config:
        ConnectivityType: private
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet_02
      - type: cloudify.relationships.depends_on
        target: elastic_ip_02

  route_private_subnet_nat_gateway_01:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_route_table_01
      - type: cloudify.relationships.connected_to
        target: private_nat_gateway_01
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: { }

  route_private_subnet_nat_gateway_02:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_route_table_02
      - type: cloudify.relationships.connected_to
        target: private_nat_gateway_02
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: { }

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        GroupName: { concat: [ { get_input: resource_prefix }, '_eks_test_group' ] }
        Description: For EKS
        VpcId: { get_attribute: [ vpc, aws_resource_id ] }
      client_config: *aws_client
      Tags:
        - Key:
            concat:
              - kubernetes.io/cluster/
              - { concat: [ { get_input: resource_prefix }, '_eks_cluster' ] }
          Value: owned
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *aws_client
      resource_config:
        kwargs:
          IpPermissions:
            - IpProtocol: "-1"
              FromPort: -1
              ToPort: -1
              IpRanges:
                - CidrIp: 0.0.0.0/0
              UserIdGroupPairs:
                - GroupId: { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group

capabilities:
  vpc_id:
    value: { get_attribute: [ vpc, aws_resource_id ] }
  private_subnet_ids:
    value: { get_attribute: [ vpc_deployment, capabilities, subnet_ids ] }
  public_subnet_ids:
    value:
      - { get_attribute: [ public_subnet_01, aws_resource_id ] }
      - { get_attribute: [ public_subnet_02, aws_resource_id ] }
  eks_security_group_id:
    value: { get_attribute: [ security_group, aws_resource_id ] }
  resource_prefix:
    value: { get_input: resource_prefix }
