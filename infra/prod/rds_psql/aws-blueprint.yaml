tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/5.2.0/types.yaml
  - plugin:cloudify-aws-plugin?version= >=2.5.6

dsl_definitions:
  aws_client: &aws_client
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

inputs:
  aws_region_name:
    type: string
  network_deployment_id:
    type: string
  resource_prefix:
    type: string
  master_username:
    type: string

node_templates:
  network:
    type: cloudify.nodes.SharedResource
    properties:
      resource_config:
        deployment:
          id: { get_input: network_deployment_id }

  password_generator:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          executor: central_deployment_agent
          implementation: scripts/generate-password.sh

  database_stack:
    type: cloudify.nodes.aws.CloudFormation.Stack
    properties:
      client_config: *aws_client
      resource_config:
        kwargs:
          StackName: { concat: [ { get_input: resource_prefix }, '-stack' ] }
          TemplateBody:
            Resources:
              MyDBSecurityGroup:
                Type: "AWS::EC2::SecurityGroup"
                Properties:
                  GroupDescription: DB security group
                  GroupName: { concat: [ { get_input: resource_prefix }, '-security-group' ] }
                  SecurityGroupIngress:
                    - CidrIp: 0.0.0.0/0
                      FromPort: 5432
                      ToPort: 5432
                      IpProtocol: tcp
                  VpcId: { get_attribute: [ network, capabilities, vpc_id ] }
              MyDBSubnetGroup:
                Type: "AWS::RDS::DBSubnetGroup"
                Properties:
                  DBSubnetGroupDescription: "DB Private Subnet"
                  SubnetIds:
                    - { get_attribute: [ network, capabilities, private_subnet_ids, 0 ] }
                    - { get_attribute: [ network, capabilities, private_subnet_ids, 1 ] }
              MyDB:
                Type: "AWS::RDS::DBInstance"
                Properties:
                  DBName: { concat: [ 'rdspsql', { get_input: resource_prefix } ] }
                  AllocatedStorage: 5
                  DBInstanceClass: db.t2.small
                  Engine: postgres
                  EngineVersion: "12.6"
                  MasterUsername: { get_input: master_username }
                  MasterUserPassword: { get_attribute: [ password_generator, master_password ] }
                  VPCSecurityGroups:
                    - Ref: MyDBSecurityGroup
                  DBSubnetGroupName: { Ref: MyDBSubnetGroup }
                DeletionPolicy: Snapshot
            Outputs:
              IpAddress:
                Value: { "Fn::GetAtt" : [ "MyDB", "Endpoint.Address" ] }
              Port:
                Value: { "Fn::GetAtt" : [ "MyDB", "Endpoint.Port" ] }
    relationships:
      - target: network
        type: cloudify.relationships.depends_on
      - target: password_generator
        type: cloudify.relationships.depends_on

  upgrade_rds_psql_version:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        upgrade:
          executor: central_deployment_agent
          implementation: scripts/upgrade-rds-psql.sh
          inputs:
            aws_access_key_id: { get_secret: aws_access_key_id }
            aws_secret_access_key: { get_secret: aws_secret_access_key }
            aws_region: { get_input: aws_region_name }
            db_instance_identifier: { get_attribute: [ database_stack, state, 0, PhysicalResourceId ] }

  scale_up_rds:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        upgrade:
          executor: central_deployment_agent
          implementation: scripts/scale-up-rds.sh
          inputs:
            aws_access_key_id: { get_secret: aws_access_key_id }
            aws_secret_access_key: { get_secret: aws_secret_access_key }
            aws_region: { get_input: aws_region_name }
            db_instance_identifier: { get_attribute: [ database_stack, state, 0, PhysicalResourceId ] }

capabilities:
  host:
    value: { get_attribute: [ database_stack, outputs_items, IpAddress ] }
  master_username:
    value: { get_input: master_username }
  master_password:
    value: { get_attribute: [ password_generator, master_password] }
